import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:sensors_plus/sensors_plus.dart';

// --- C√ÅC H·∫∞NG S·ªê C·ª¶A GAME ---
const double BALL_SIZE = 50.0;
const double TARGET_SIZE = 50.0;
// H·ªá s·ªë ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô, c√†ng l·ªõn bi lƒÉn c√†ng nhanh
const double SPEED_FACTOR = 4.0;
// Ng∆∞·ª°ng va ch·∫°m: Kho·∫£ng c√°ch gi·ªØa t√¢m hai v·∫≠t th·ªÉ ƒë·ªÉ ƒë∆∞·ª£c coi l√† ch·∫°m
const double COLLISION_THRESHOLD = 25.0;

void main() {
  // ƒê·∫£m b·∫£o Flutter binding ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi ch·∫°y ·ª©ng d·ª•ng
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'LƒÉn Bi ThƒÉng B·∫±ng',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        useMaterial3: true,
        // C√†i ƒë·∫∑t font Inter (gi·∫£ ƒë·ªãnh)
        fontFamily: 'Inter',
      ),
      home: const BalanceGameScreen(),
    );
  }
}

class BalanceGameScreen extends StatefulWidget {
  const BalanceGameScreen({super.key});

  @override
  State<BalanceGameScreen> createState() => _BalanceGameScreenState();
}

class _BalanceGameScreenState extends State<BalanceGameScreen> {
  // --- V·ªä TR√ç V√Ä TR·∫†NG TH√ÅI GAME ---
  double _ballX = 0.0;
  double _ballY = 0.0;
  double _targetX = 0.0;
  double _targetY = 0.0;
  bool _isWin = false;
  late StreamSubscription<AccelerometerEvent> _accelerometerSubscription;

  // Bi·∫øn l∆∞u k√≠ch th∆∞·ªõc m√†n h√¨nh ƒë·ªÉ t√≠nh gi·ªõi h·∫°n
  double _screenWidth = 0.0;
  double _screenHeight = 0.0;

  @override
  void initState() {
    super.initState();
    _initGame();
  }

  // Kh·ªüi t·∫°o tr·∫°ng th√°i game: ƒë·∫∑t bi ·ªü gi·ªØa, ƒë·∫∑t ƒë√≠ch ng·∫´u nhi√™n
  void _initGame() {
    // ƒê·∫£m b·∫£o r·∫±ng vi·ªác l·∫Øng nghe c·∫£m bi·∫øn ch·ªâ di·ªÖn ra sau khi game ƒë∆∞·ª£c kh·ªüi t·∫°o
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _screenWidth = MediaQuery.of(context).size.width;
      _screenHeight = MediaQuery.of(context).size.height;

      setState(() {
        // ƒê·∫∑t bi ·ªü gi·ªØa m√†n h√¨nh
        _ballX = (_screenWidth / 2) - (BALL_SIZE / 2);
        _ballY = (_screenHeight / 2) - (BALL_SIZE / 2);
        _setRandomTarget();
        _isWin = false;
      });

      _startListeningToAccelerometer();
    });
  }

  // ƒê·∫∑t ƒë√≠ch (target) t·∫°i m·ªôt v·ªã tr√≠ ng·∫´u nhi√™n tr√™n m√†n h√¨nh
  void _setRandomTarget() {
    final random = Random();

    // ƒê·∫£m b·∫£o ƒë√≠ch kh√¥ng n·∫±m s√°t m√©p m√†n h√¨nh
    _targetX = random.nextDouble() * (_screenWidth - TARGET_SIZE - 20) + 10;
    _targetY = random.nextDouble() * (_screenHeight - TARGET_SIZE - 20) + 10;

    // T·∫°m th·ªùi d·ª´ng l·∫Øng nghe ƒë·ªÉ tr√°nh c·∫≠p nh·∫≠t v·ªã tr√≠ bi trong l√∫c ƒë·∫∑t ƒë√≠ch
    _accelerometerSubscription.pause();
    setState(() {});
    _accelerometerSubscription.resume();
  }

  // B·∫Øt ƒë·∫ßu l·∫Øng nghe Gia t·ªëc k·∫ø
  void _startListeningToAccelerometer() {
    // L·∫Øng nghe Gia t·ªëc k·∫ø
    _accelerometerSubscription = accelerometerEvents.listen(
          (AccelerometerEvent event) {
        if (_isWin) return; // Kh√¥ng di chuy·ªÉn bi khi ƒë√£ th·∫Øng

        // C·∫≠p nh·∫≠t t·ªça ƒë·ªô trong setState
        setState(() {
          // C·∫≠p nh·∫≠t v·ªã tr√≠ X: event.x l√† ƒë·ªô nghi√™ng theo chi·ªÅu ngang
          // D·∫•u c·ªông (+) cho event.x th∆∞·ªùng l√†m bi di chuy·ªÉn theo h∆∞·ªõng nghi√™ng t·ª± nhi√™n
          _ballX += event.x * SPEED_FACTOR;

          // C·∫≠p nh·∫≠t v·ªã tr√≠ Y: event.y l√† ƒë·ªô nghi√™ng theo chi·ªÅu d·ªçc (tr∆∞·ªõc/sau)
          // D·∫•u tr·ª´ (-) ƒë·∫£o ng∆∞·ª£c h∆∞·ªõng ƒë·ªÉ khi nghi√™ng v·ªÅ tr∆∞·ªõc (√¢m) bi ƒëi l√™n
          _ballY -= event.y * SPEED_FACTOR;

          // --- Logic Gi·ªõi H·∫°n T·ªëc ƒê·ªô & Bi√™n ƒê·ªô ---
          // Clamping ƒë·ªÉ bi kh√¥ng lƒÉn ra ngo√†i m√†n h√¨nh
          _ballX = _ballX.clamp(0.0, _screenWidth - BALL_SIZE);
          _ballY = _ballY.clamp(0.0, _screenHeight - BALL_SIZE);

          // Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·∫Øng sau m·ªói l·∫ßn c·∫≠p nh·∫≠t v·ªã tr√≠
          _checkWinCondition();
        });
      },
      onError: (e) {
        // X·ª≠ l√Ω l·ªói n·∫øu kh√¥ng c√≥ c·∫£m bi·∫øn
        print('Accelerometer Error: $e');
        // C√≥ th·ªÉ hi·ªán SnackBar b√°o l·ªói
      },
      cancelOnError: true,
    );
  }

  // Ki·ªÉm tra xem Qu·∫£ bi ƒë√£ ch·∫°m v√†o ƒê√≠ch ch∆∞a
  void _checkWinCondition() {
    // T√≠nh to√°n t√¢m c·ªßa Qu·∫£ bi
    final ballCenterX = _ballX + BALL_SIZE / 2;
    final ballCenterY = _ballY + BALL_SIZE / 2;

    // T√≠nh to√°n t√¢m c·ªßa ƒê√≠ch
    final targetCenterX = _targetX + TARGET_SIZE / 2;
    final targetCenterY = _targetY + TARGET_SIZE / 2;

    // T√≠nh kho·∫£ng c√°ch Euclidean gi·ªØa hai t√¢m
    final distance = sqrt(
        pow(ballCenterX - targetCenterX, 2) +
            pow(ballCenterY - targetCenterY, 2)
    );

    // N·∫øu kho·∫£ng c√°ch nh·ªè h∆°n ng∆∞·ª°ng va ch·∫°m (25.0), game k·∫øt th√∫c
    if (distance < COLLISION_THRESHOLD && !_isWin) {
      _isWin = true;
      _showWinDialog();
    }
  }

  // Hi·ªÉn th·ªã h·ªôp tho·∫°i chi·∫øn th·∫Øng
  void _showWinDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          backgroundColor: Colors.white,
          title: const Text('üéâ Ch√∫c m·ª´ng Chi·∫øn th·∫Øng! üéâ', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.green)),
          content: const Text('B·∫°n ƒë√£ ƒë∆∞a qu·∫£ bi v√†o ƒë√≠ch th√†nh c√¥ng! S·∫µn s√†ng cho v√≤ng ti·∫øp theo?', style: TextStyle(color: Colors.black87)),
          actions: <Widget>[
            TextButton(
              child: const Text('V√≤ng m·ªõi', style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold)),
              onPressed: () {
                Navigator.of(context).pop(); // ƒê√≥ng h·ªôp tho·∫°i
                _resetGame();
              },
            ),
          ],
        );
      },
    );
  }

  // ƒê·∫∑t l·∫°i tr√≤ ch∆°i (reset tr·∫°ng th√°i th·∫Øng v√† ƒë·∫∑t l·∫°i ƒë√≠ch)
  void _resetGame() {
    setState(() {
      _isWin = false;
      _setRandomTarget(); // ƒê·∫∑t ƒë√≠ch ·ªü v·ªã tr√≠ ng·∫´u nhi√™n m·ªõi
    });
    // Bi v·∫´n gi·ªØ nguy√™n v·ªã tr√≠, ng∆∞·ªùi ch∆°i ph·∫£i ti·∫øp t·ª•c lƒÉn
    _accelerometerSubscription.resume();
  }

  @override
  void dispose() {
    _accelerometerSubscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc m√†n h√¨nh trong build
    _screenWidth = MediaQuery.of(context).size.width;
    _screenHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'LƒÉn Bi ThƒÉng B·∫±ng',
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
        ),
        backgroundColor: Colors.blueAccent,
        elevation: 4,
      ),
      body: Container(
        // Thi·∫øt l·∫≠p giao di·ªán th√¢n thi·ªán v·ªõi thi·∫øt b·ªã di ƒë·ªông
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFFE0F7FA), Color(0xFFB3E5FC)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Stack(
          children: [
            // --- 1. ƒê√≠ch (Target) ---
            Positioned(
              left: _targetX,
              top: _targetY,
              child: Container(
                width: TARGET_SIZE,
                height: TARGET_SIZE,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: Colors.grey.shade300, // M√†u n·ªÅn s√°ng
                  border: Border.all(color: Colors.grey.shade700, width: 4), // Vi·ªÅn ƒë·∫≠m
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.shade500.withOpacity(0.5),
                      blurRadius: 8,
                      offset: const Offset(2, 2),
                    ),
                  ],
                ),
                child: const Center(
                  child: Icon(Icons.star, color: Colors.green, size: 30),
                ),
              ),
            ),

            // --- 2. Qu·∫£ bi (Ball) ---
            Positioned(
              left: _ballX,
              top: _ballY,
              child: Container(
                width: BALL_SIZE,
                height: BALL_SIZE,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  // Bi ƒë·ªïi m√†u khi th·∫Øng ƒë·ªÉ c√≥ ph·∫£n h·ªìi th·ªã gi√°c
                  color: _isWin ? Colors.green.shade600 : Colors.blue.shade600,
                  gradient: LinearGradient(
                    colors: [
                      _isWin ? Colors.greenAccent : Colors.blueAccent,
                      _isWin ? Colors.green.shade800 : Colors.blue.shade800,
                    ],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.3),
                      blurRadius: 10,
                      offset: const Offset(5, 5),
                    ),
                  ],
                ),
              ),
            ),

            // --- 3. Hi·ªÉn th·ªã Tr·∫°ng th√°i (T√πy ch·ªçn) ---
            if (_isWin)
              Center(
                child: Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.green.withOpacity(0.8),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: const Text(
                    'ƒê√É CH·∫†M ƒê√çCH!',
                    style: TextStyle(
                        color: Colors.white,
                        fontSize: 24,
                        fontWeight: FontWeight.bold
                    ),
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
}